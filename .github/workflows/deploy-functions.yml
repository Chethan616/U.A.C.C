name: Deploy Firebase Functions

on:
  push:
    branches:
      - main
      - production
    paths:
      - 'functions/**'
      - '.github/workflows/deploy-functions.yml'
  pull_request:
    paths:
      - 'functions/**'
  workflow_dispatch:

env:
  FIREBASE_PROJECT_ID: uacc-uacc

jobs:
  test-functions:
    name: Test Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install functions dependencies
        run: |
          cd functions
          npm install

      - name: Run linting
        run: |
          cd functions
          npm run lint

      - name: Run tests (if available)
        run: |
          cd functions
          npm test || echo "No tests configured"

  deploy-functions:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: test-functions
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install functions dependencies
        run: |
          cd functions
          npm install

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create Gemini API Secret (if not exists)
        run: |
          if ! gcloud secrets describe GEMINI_API_KEY --project=${{ env.FIREBASE_PROJECT_ID }} &>/dev/null; then
            echo "${{ secrets.GEMINI_API_KEY }}" | gcloud secrets create GEMINI_API_KEY --data-file=- --project=${{ env.FIREBASE_PROJECT_ID }}
            echo "Created new secret GEMINI_API_KEY"
          else
            echo "${{ secrets.GEMINI_API_KEY }}" | gcloud secrets versions add GEMINI_API_KEY --data-file=- --project=${{ env.FIREBASE_PROJECT_ID }}
            echo "Updated existing secret GEMINI_API_KEY"
          fi

      - name: Grant Secret Manager access to Cloud Functions
        run: |
          PROJECT_NUMBER=$(gcloud projects describe ${{ env.FIREBASE_PROJECT_ID }} --format="value(projectNumber)")
          SERVICE_ACCOUNT="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          
          gcloud secrets add-iam-policy-binding GEMINI_API_KEY \
            --member="serviceAccount:${SERVICE_ACCOUNT}" \
            --role="roles/secretmanager.secretAccessor" \
            --project=${{ env.FIREBASE_PROJECT_ID }} || echo "IAM binding already exists"

      - name: Deploy Firebase Functions
        run: |
          firebase use ${{ env.FIREBASE_PROJECT_ID }}
          firebase deploy --only functions:geminiProxy --force
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Test deployed function
        run: |
          echo "Function deployed successfully"
          curl -X POST "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/geminiProxy" \
            -H "Content-Type: application/json" \
            -d '{"test": true}' \
            -w "\nHTTP Status: %{http_code}\n" || echo "Health check failed (expected without auth)"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Firebase Functions deployed successfully"
          else
            echo "❌ Firebase Functions deployment failed"
          fi