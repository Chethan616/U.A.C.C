plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration
    id "kotlin-android"
    id "org.jetbrains.kotlin.plugin.compose" version "2.0.0"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def skipCrashlyticsEnv = System.getenv("SKIP_CRASHLYTICS_UPLOAD")
def skipCrashlyticsUpload = project.hasProperty("skipCrashlyticsUpload") ||
        (skipCrashlyticsEnv != null && ["1", "true", "yes", "on"].contains(skipCrashlyticsEnv.toLowerCase()))

android {
    namespace = "com.example.uacc"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        // Enable core library desugaring for compatibility
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    
    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.5.8"
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.uacc"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdkVersion = flutter.minSdkVersion  // Updated for Firebase Auth compatibility
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

if (skipCrashlyticsUpload) {
    println("[Crashlytics] Mapping/native symbol upload disabled for this build (offline/dev mode).")

    tasks.configureEach { task ->
        if (task.name.startsWith("uploadCrashlytics") ||
                task.name.contains("CrashlyticsSymbol")) {
            task.enabled = false
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // Core library desugaring dependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // JSON parsing for task management
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Dynamic Island dependencies - Animation support
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.interpolator:interpolator:1.0.0'
    
    // Additional Android support libraries for Dynamic Island
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    
    // Jetpack Compose dependencies for MaterialYou Dynamic Island
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.runtime:runtime'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.animation:animation'
    implementation 'androidx.compose.animation:animation-core'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.glance:glance:1.1.0-beta01'
    implementation 'androidx.glance:glance-appwidget:1.1.0-beta01'
    implementation 'androidx.glance:glance-material3:1.1.0-beta01'
    
    // Lottie animation for AI pulse
    implementation 'com.airbnb.android:lottie:6.2.0'
    
    // HTTP client for Gemini API
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
}
